/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author albertlockett
 */


import java.lang.*;
import java.io.*;
import java.util.*;


public class gui1 extends javax.swing.JDialog implements Runnable {

    /**
     * Creates new form gui1
     */
    public gui1(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

		// here is where you can initialize some of your own stuff
		instrument = new String("Piano");
		input = new String("0");
		started = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volume_jp = new javax.swing.JPanel();
        volume_jl = new javax.swing.JLabel();
        volume_slider = new javax.swing.JSlider();
        input_sel_jp = new javax.swing.JPanel();
        input_sel_jl = new javax.swing.JLabel();
        input_sel_cb = new javax.swing.JComboBox();
        inst_sel_jp = new javax.swing.JPanel();
        inst_sel_jl = new javax.swing.JLabel();
        inst_sel_cb = new javax.swing.JComboBox();
        control_jp = new javax.swing.JPanel();
        control_quit = new javax.swing.JButton();
        control_start = new javax.swing.JButton();
        control_stop = new javax.swing.JButton();
        status_jp = new javax.swing.JPanel();
        status_jl = new javax.swing.JLabel();
        status_field = new javax.swing.JTextField();
        logo_jp = new javax.swing.JPanel();
        logo_jl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        volume_jp.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        volume_jl.setText("Volume");

        volume_slider.setMinorTickSpacing(10);
        volume_slider.setPaintTicks(true);
        volume_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volume_sliderStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout volume_jpLayout = new org.jdesktop.layout.GroupLayout(volume_jp);
        volume_jp.setLayout(volume_jpLayout);
        volume_jpLayout.setHorizontalGroup(
            volume_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(volume_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(volume_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(volume_jpLayout.createSequentialGroup()
                        .add(volume_jl)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(volume_slider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        volume_jpLayout.setVerticalGroup(
            volume_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(volume_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(volume_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(volume_slider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        input_sel_jp.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        input_sel_jl.setText("Input Select");

        input_sel_cb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "USB MIDI", "Bluetooth" }));
        input_sel_cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_sel_cbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout input_sel_jpLayout = new org.jdesktop.layout.GroupLayout(input_sel_jp);
        input_sel_jp.setLayout(input_sel_jpLayout);
        input_sel_jpLayout.setHorizontalGroup(
            input_sel_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(input_sel_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(input_sel_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(input_sel_jl)
                    .add(input_sel_cb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        input_sel_jpLayout.setVerticalGroup(
            input_sel_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(input_sel_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(input_sel_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(input_sel_cb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inst_sel_jp.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        inst_sel_jl.setText("Instrument Select");

        inst_sel_cb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Piano", "Harpsichord", "Flute", "Clarinet", "Guitar" }));
        inst_sel_cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inst_sel_cbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout inst_sel_jpLayout = new org.jdesktop.layout.GroupLayout(inst_sel_jp);
        inst_sel_jp.setLayout(inst_sel_jpLayout);
        inst_sel_jpLayout.setHorizontalGroup(
            inst_sel_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(inst_sel_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(inst_sel_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(inst_sel_jl)
                    .add(inst_sel_cb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inst_sel_jpLayout.setVerticalGroup(
            inst_sel_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(inst_sel_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(inst_sel_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(inst_sel_cb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        control_jp.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        control_quit.setText("Quit");
        control_quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_quitActionPerformed(evt);
            }
        });

        control_start.setText("Start");
        control_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_startActionPerformed(evt);
            }
        });

        control_stop.setText("Stop");
        control_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_stopActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout control_jpLayout = new org.jdesktop.layout.GroupLayout(control_jp);
        control_jp.setLayout(control_jpLayout);
        control_jpLayout.setHorizontalGroup(
            control_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, control_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(control_stop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(control_start, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(control_quit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        control_jpLayout.setVerticalGroup(
            control_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(control_jpLayout.createSequentialGroup()
                .add(17, 17, 17)
                .add(control_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(control_quit)
                    .add(control_start)
                    .add(control_stop))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        status_jp.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        status_jl.setText("Status");

        status_field.setEditable(false);
        status_field.setText("Stopped");

        org.jdesktop.layout.GroupLayout status_jpLayout = new org.jdesktop.layout.GroupLayout(status_jp);
        status_jp.setLayout(status_jpLayout);
        status_jpLayout.setHorizontalGroup(
            status_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(status_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(status_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(status_field, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 482, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(status_jl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        status_jpLayout.setVerticalGroup(
            status_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(status_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(status_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(status_field, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addContainerGap())
        );

        logo_jp.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        logo_jl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/2.jpeg"))); // NOI18N

        org.jdesktop.layout.GroupLayout logo_jpLayout = new org.jdesktop.layout.GroupLayout(logo_jp);
        logo_jp.setLayout(logo_jpLayout);
        logo_jpLayout.setHorizontalGroup(
            logo_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(logo_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(logo_jl)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        logo_jpLayout.setVerticalGroup(
            logo_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(logo_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(logo_jl)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(15, 15, 15)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(status_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(input_sel_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(inst_sel_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, logo_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(volume_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(control_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .add(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(logo_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(inst_sel_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(volume_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(27, 27, 27)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(control_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(input_sel_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(status_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


// HERE IS THE CODE TO HANDLE ALL THE USER INPUTS -----------------------------------------------------------------------------------------------
    private void inst_sel_cbActionPerformed(java.awt.event.ActionEvent evt) {
	//GEN-FIRST:event_inst_sel_cbActionPerformed
 
        System.out.println("Debug - instrument select changed");
		String new_inst = (String) inst_sel_cb.getSelectedItem();
		if(new_inst.equals(instrument)){
			System.out.println("Debug - new instrument matches already running instrument");
		} else {
			if(new_inst.equals("Piano")){
				System.out.println("Piano Selected");
				pb = new ProcessBuilder("./piano",input," ");
			}

			if(new_inst.equals("Harpsichord")){
				System.out.println("Harpsichord Selected");
				pb = new ProcessBuilder("./harpsichord",input," ");
			}

			if(new_inst.equals("Flute")){
				System.out.println("Flute Selected");
				pb = new ProcessBuilder("./flute",input," ");
			}
			
			if(new_inst.equals("Clarinet")){
				System.out.println("Clarinet Selected");
				pb = new ProcessBuilder("./clarinet",input," ");
			}

			if(new_inst.equals("Guitar")){
				System.out.println("Guitar Selected");
				pb = new ProcessBuilder("./guitar",input," ");
			}
			instrument = new String(new_inst);
			
			if(started){
				try{
					p.destroy();
					p = pb.start();
					status_field.setText("Running "+instrument);
			} catch (Exception e){
				System.out.println("Couldn't switch the instrument");
			}

			}

		}
    }//GEN-LAST:event_inst_sel_cbActionPerformed


    private void input_sel_cbActionPerformed(java.awt.event.ActionEvent evt) {
	//GEN-FIRST:event_input_sel_cbActionPerformed

        System.out.println("Input select Changed");
		if(input_sel_cb.getSelectedItem().equals(input)){

		} else {
			if(input_sel_cb.getSelectedItem().equals("USB MIDI")){
				input = new String("0");
			}
	
			if(input_sel_cb.getSelectedItem().equals("Bluetooth")){
				input = new String("1");
			}
			System.out.println("input select = " + input);		
			if(started){
				try{
					if(instrument.equals("Piano")){
						System.out.println("Piano Selected");
						pb = new ProcessBuilder("./piano",input," ");
					}

					if(instrument.equals("Harpsichord")){
						System.out.println("Harpsichord Selected");
						pb = new ProcessBuilder("./harpsichord",input," ");
					}

					if(instrument.equals("Flute")){
						System.out.println("Flute Selected");
						pb = new ProcessBuilder("./flute",input," ");
					}
					
					if(instrument.equals("Clarinet")){
						System.out.println("Clarinet Selected");
						pb = new ProcessBuilder("./clarinet",input," ");
					}
			
					if(instrument.equals("Guitar")){
						System.out.println("Guitar Selected");
						pb = new ProcessBuilder("./guitar",input," ");
					}

					p.destroy();
					p = pb.start();
				} catch(Exception e) {
					System.out.println("Couldn't switch the input method");
				}
			}
		}
    }//GEN-LAST:event_input_sel_cbActionPerformed


    private void control_stopActionPerformed(java.awt.event.ActionEvent evt) {
	//GEN-FIRST:event_control_stopActionPerformed

        System.out.println("stop selected");
		if(started){
			try{
				p.destroy();
				started = false;
				status_field.setText("Stopped");
			} catch (Exception e){
				System.out.println("Sucess - Exception was caught by JVM\n");
				System.out.println("THE PROCESS IS RUNNING OUT OF CONTROL!!!!");
			}
		} else {
			// Here send something to the status window
		}
    }//GEN-LAST:event_control_stopActionPerformed


    private void control_startActionPerformed(java.awt.event.ActionEvent evt) {
	//GEN-FIRST:event_control_startActionPerformed

        System.out.println("start selected");
		if(instrument.equals("Piano")){
			pb = new ProcessBuilder("./piano",input," ");
			status_field.setText("Running Piano");
		}
		if(instrument.equals("Harpsichord")){
			pb = new ProcessBuilder("./harpsichord",input," ");
			status_field.setText("Running Harpsichord");
		}
		if(instrument.equals("Flute")){
			System.out.println("Process is flute");
			pb = new ProcessBuilder("./flute", input," ");
			status_field.setText("Running Flute");
		}
		if(instrument.equals("Clarinet")){
			System.out.println("Process is Clarinet");
			pb = new ProcessBuilder("./clarinet",input," ");
			status_field.setText("Running Clarinet");
		}
		if(instrument.equals("Guitar")){
			System.out.println("Process is Guitar");
			pb = new ProcessBuilder("./guitar",input," ");
			status_field.setText("Runnng Guitar");
		}
		if(started){
			// Send something to the status screen here
		} else {
			try{
				p = pb.start();
				started = true;
			} catch(Exception e){
				System.out.println("Sucess - Exception was caught");
				System.out.println("Could not run the process");
			}
		}
    }//GEN-LAST:event_control_startActionPerformed


    private void control_quitActionPerformed(java.awt.event.ActionEvent evt) {
	//GEN-FIRST:event_control_quitActionPerformed

        System.out.println("debug - quit selected");
			try{ 
				if(started) {p.destroy();}
				System.out.println("Killing startup code");
				Runtime.getRuntime().exec("sudo pkill -f\"/bin/bash ./init_code.sh\"");
				Runtime.getRuntime().exec("sudo pkill rfcomm");
			}
			catch(Exception e){
				System.out.println("Couldn't kill the process at the end");
				System.out.println("Might need to handle this one manually .. ps -ef it");
			}
	
		System.exit(0);
    }//GEN-LAST:event_control_quitActionPerformed


    private void volume_sliderStateChanged(javax.swing.event.ChangeEvent evt) {
	//GEN-FIRST:event_volume_sliderStateChanged

        System.out.println("Slider State Changed");
		try{	
			File volume = new File("volume");
			BufferedWriter fw = new BufferedWriter(new FileWriter(volume));
			System.out.println(Integer.toString(volume_slider.getValue()));
			fw.write(Integer.toString(volume_slider.getValue()));
			fw.close();
		} catch (Exception e){
			System.out.println("Couldn't write volume set file");
		}
    }//GEN-LAST:event_volume_sliderStateChanged

	public void run(){
		FileReader file;
		BufferedReader reader;
		String line;
		String old_line = new String("...");
		Scanner sc;
		String cmd;
		int val;
		while(true){
			try{
				Thread.sleep(200);
				file = new FileReader("proc_msg");
				reader = new BufferedReader(file);
				line = reader.readLine();
				if(line.equals(old_line)){
					
				} else {
					// Parse the message here
					System.out.println("New Message: " + line);
					sc = new Scanner(line);
					cmd = sc.next();
					val = sc.nextInt();
					if(cmd.equals("v")){ // Volume control command
						System.out.println("Chaninging volume to " + val);
						volume_slider.setValue(val);
					}
					if(cmd.equals("i")){ // Instrument change command
						switch(val){
							case(128): // piano
								p.destroy();
								pb = new ProcessBuilder("hexdump", "/dev/rfcomm0", " ");
								p = pb.start();
								instrument = new String("Piano");
								inst_sel_cb.setSelectedItem(instrument);
								Thread.sleep(200);
								p.destroy();
								pb = new ProcessBuilder("./piano","1"," ");
								p = pb.start();
								break;
							case(129): // flute
								p.destroy();
								pb = new ProcessBuilder("hexdump", "/dev/rfcomm0", " ");
								p = pb.start();
								instrument = new String("Flute");
								inst_sel_cb.setSelectedItem(instrument);
								Thread.sleep(200);
								p.destroy();
								pb = new ProcessBuilder("./flute","1"," ");
								p = pb.start();
								break;
							case(130): // harpsichord
								p.destroy();
								pb = new ProcessBuilder("hexdump", "/dev/rfcomm0", " ");
								p = pb.start();
								instrument = new String("Harpsichord");
								inst_sel_cb.setSelectedItem(instrument);
								Thread.sleep(200);
								p.destroy();
								pb = new ProcessBuilder("./harpsichord","1"," ");
								p = pb.start();
								break;
							case(131): // clarinet
								p.destroy();
								pb = new ProcessBuilder("hexdump", "/dev/rfcomm0"," ");
								p = pb.start();
								instrument = new String("Clarinet");
								inst_sel_cb.setSelectedItem(instrument);
								Thread.sleep(200);
								p.destroy();
								pb = new ProcessBuilder("./clarinet","1"," ");
								p = pb.start();
								break;
							case(132): // guitar
								p.destroy();
								pb = new ProcessBuilder("hexdump", "/dev/rfcomm0", " ");
								p = pb.start();
								instrument = new String("Guitar");
								inst_sel_cb.setSelectedItem(instrument);
								Thread.sleep(200);
								p.destroy();
								pb = new ProcessBuilder("./guitar", "1", " ");
								p = pb.start();
								break;
						}
					}
					old_line = new String(line);
				}
				//System.out.println("Read message was" + line);
			} catch (Exception e) {
				System.out.println("Sucess - Exception was caught reading proc_msg");
				System.out.println(e.getMessage());
			}
		}
	}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // This is where all the init code goes:
		ProcessBuilder pb_init = new ProcessBuilder("./init_code.sh", " ", " ");
		Process p_init = null;
		try{
			p_init = pb_init.start();
			System.out.println("done running the init script");
		} catch(Exception e){
			System.out.println("Success - Exception was caught");
			System.out.println("Couldn't run the init code");
		}        

    
        /* Create and display the dialog */
        //java.awt.EventQueue.invokeLater(new Runnable() {
        //    public void run() {
        gui1 dialog = new gui1(new javax.swing.JFrame(), true);
		System.out.println("test");
		Thread th = new Thread(dialog);
		th.start();
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
						System.out.println("Goodbye!");		
                        //System.exit(0);
                    }
       });
       dialog.setVisible(true);
	   System.out.println("Ending RFCOMM PROCESSES...");
	   p_init.destroy();
	   try{
			Runtime.getRuntime().exec("sudo pkill rfcomm");
		} catch (Exception e1){
			System.out.println("Couldnt kill rfcomm");
			System.out.println(e1.getMessage());
		}
	   System.exit(0);
            //}
        //});

    }
    
    // Albert's Variable Definitions
    Process p;
	ProcessBuilder pb;
	String instrument;
	String input; 
	boolean started;
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel control_jp;
    private javax.swing.JButton control_quit;
    private javax.swing.JButton control_start;
    private javax.swing.JButton control_stop;
    private javax.swing.JComboBox input_sel_cb;
    private javax.swing.JLabel input_sel_jl;
    private javax.swing.JPanel input_sel_jp;
    private javax.swing.JComboBox inst_sel_cb;
    private javax.swing.JLabel inst_sel_jl;
    private javax.swing.JPanel inst_sel_jp;
    private javax.swing.JLabel logo_jl;
    private javax.swing.JPanel logo_jp;
    private javax.swing.JTextField status_field;
    private javax.swing.JLabel status_jl;
    private javax.swing.JPanel status_jp;
    private javax.swing.JLabel volume_jl;
    private javax.swing.JPanel volume_jp;
    private javax.swing.JSlider volume_slider;
    // End of variables declaration//GEN-END:variables
}
